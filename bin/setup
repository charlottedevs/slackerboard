#!/bin/bash

set -e

# ensure we're at project root
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}"  )" && pwd  )"
cd "$DIR/.."

BUILD_ENV="$1"
CONFIG='./config.yml'

check_build_env () {
  # ask user to confirm BUILD_ENV if no argument given
  if [ -z "$BUILD_ENV" ]; then
    default_selection='1'

    echo 'Select build environment:'
    echo '1) development'
    echo '2) production'
    read -p "build selection: [$default_selection] " build_selection

    build_selection=${build_selection:-$default_selection}

    if [ "$build_selection" = '1' ]; then
      BUILD_ENV='development'
    elif [ "$build_selection" = '2' ]; then
      BUILD_ENV='production'
    else
      echo "invalid build selection: '$build_selection'"
      exit
    fi
  fi

  echo "building environment: $BUILD_ENV"
}

showcmd() {
  echo "$ $*"
}

info() {
  echo "+ $*"
}

ok() {
  info "=> OK"
}

step() {
  showcmd "$*"
  eval "$*" || abort "$*"
  ok
}

abort() {
  info "!!! FAILED: '$*'" >&2
  exit 1
}

confirm() {
  question=${1:-'Are you sure?'}
  # call with a prompt string or use a default
  read -r -p "$question [Y/n] " response
  response=${response:-'Y'}
  case "$response" in
    [yY][eE][sS]|[yY])
      true
      ;;
    *)
      false
      ;;
  esac
}

check_root() {
  if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root. Please sudo or log in as root first." 1>&2
    exit 1
  fi

  ok
}

check_and_install_docker () {
  docker_path=`command -v docker.io || command -v docker || true`
  if [ -z $docker_path ]; then
    read  -p "Docker not installed. Enter to install from https://get.docker.com/ or Ctrl+C to exit"
    curl https://get.docker.com/ | sh
  fi

  docker_path=`command -v docker.io || command -v docker || true`
  if [ -z $docker_path ]; then
    echo Docker install failed. Quitting.
    exit
  fi

  ok
}

add_sudo_users_to_docker_group () {
  groupadd docker 2>/dev/null || true
  users=`grep -Po '^sudo.+:\K.*$' /etc/group || true`
  for u in "$users"; do
    echo "$u is now in docker group"
    usermod -aG docker $u
  done

  ok
}

check_and_install_docker_compose () {
  docker_compose_path=`command -v docker-compose || true`
  if [ -z $docker_compose_path ]; then
    read  -p "Docker Compose not installed. Enter to install or Ctrl+C to exit"
    compose_version=`git ls-remote https://github.com/docker/compose | grep refs/tags | grep -oP "[0-9]+\.[0-9][0-9]+\.[0-9]+$" | tail -n 1`
    compose_url="https://github.com/docker/compose/releases/download/${compose_version}/docker-compose-`uname -s`-`uname -m`"
    compose_completion_url="https://raw.githubusercontent.com/docker/compose/${compose_version}/contrib/completion/bash/docker-compose"

    sh -c "curl -L $compose_url > /usr/local/bin/docker-compose"
    chmod +x /usr/local/bin/docker-compose
    sh -c "curl -L $compose_completion_url > /etc/bash_completion.d/docker-compose"
  fi


  docker_compose_path=`command -v docker-compose || true`
  if [ -z $docker_compose_path ]; then
    echo Docker Compose install failed. Quitting.
    exit
  fi

  ok
}

compose () {
  if [ "$BUILD_ENV" = "production" ]; then
    bin/prod "$@"
  elif [ "$BUILD_ENV" != "development" ]; then
    abort "Unknown build environment: '$BUILD_ENV'.  Aborting."
  else
    step docker-compose "$@"
  fi

}

info 'checking permissions'
check_root

info 'checking build environment'
check_build_env


##
## read a variable from the config file
##
read_config() {
  config_line=`egrep "^#?$1:" $CONFIG`
  read_config_result=`echo $config_line | awk  '{ print $2 }'`
  echo $read_config_result
}

check_IP_match () {
  HOST="$1"
  echo
  echo Checking your domain name . . .
  if connect_to_port $HOST 443
  then
    echo
    echo "Connection to $HOST succeeded."
  else
    echo WARNING:: This server does not appear to be accessible at $HOST:443.
    echo
    if connect_to_port $HOST 80
    then
      echo A connection to port 80 succeeds, however.
      echo This suggests that your DNS settings are correct,
      echo but something is keeping traffic to port 443 from getting to your server.
      echo Check your networking configuration to see that connections to port 443 are allowed.
    else
      echo "A connection to http://$HOST (port 80) also fails."
      echo
      echo This suggests that $HOST resolves to the wrong IP address
      echo or that traffic is not being routed to your server.
    fi
    echo
    echo Google: \"open ports YOUR CLOUD SERVICE\" for information for resolving this problem.
    sleep 3
  fi
}

##
## Check whether a connection to HOSTNAME ($1) on PORT ($2) is possible
##
connect_to_port () {
  HOST="$1"
  PORT="$2"
  VERIFY=`date +%s | sha256sum | base64 | head -c 20`
  echo -e "HTTP/1.1 200 OK\n\n $VERIFY" | nc -w 4 -l -p $PORT >/dev/null 2>&1 &
  if curl --proto =http -s $HOST:$PORT --connect-timeout 3 | grep $VERIFY >/dev/null 2>&1
  then
    return 0
  else
    curl --proto =http -s localhost:$PORT >/dev/null 2>&1
    return 1
  fi
}


if [ "$BUILD_ENV" =  "production" ]; then
  info 'loading config'
  ./bin/build-config


  info 'build ssl.conf'
  ./bin/mustache "$CONFIG" templates/ssl.conf.mustache > nginx/prod/ssl.conf
  info 'build nginx.conf'
  ./bin/mustache "$CONFIG" templates/nginx.conf.mustache > nginx/prod/nginx.conf

  read_config email
  email="$read_config_result"

  read_config hostname
  hostname="$read_config_result"

  info 'checking DNS settings'
  check_IP_match "$hostname"

  if confirm "run letsencrypt for $hostname?"
  then
    info 'running letsencrypt'
    ./bin/letsencrypt "$hostname" "$email"
  else
    echo 'skipping letsencrypt'
  fi
fi

info 'checking docker is installed'
check_and_install_docker

info 'adding any sudo users to docker group'
add_sudo_users_to_docker_group

info 'checking docker-compose is installed'
check_and_install_docker_compose


if [ "$BUILD_ENV" =  "production" ]; then
  info 'building frontend'
  compose run --rm slackerboard yarn run build
fi

info 'building services (this might take a while)'
compose build

info 'setting up db'
compose run --rm api bin/setup

echo 'setup complete'
